##
## GE.properties
##
## Fichero de propiedades para Grammatical Evolution
## también parámetros generales de la ejecución
##
## Circuito de función gaussiana
##

# Paralelismo=false
# false: ejecución no paralela
# true: ejecución paralela
Paralelismo=false
#Paralelismo=false

# GeneratorClassName=es.uned.simda.acidge.generador.GeneradorMultiGrammar
# 0: Algoritmo GE
# 1: Algoritmo GE2
# 2: Algoritmo Multigrammar
GeneratorClassName=es.uned.simda.acidge.generador.GeneradorMultiGrammar

# Type of fitness/problem to be applied/solved by GA:
# 1: polinomio cuadrático x^2 + x + 1
# 2: función exp(x)
# 3: función seno(x)
# 4: puntos ad hoc
# 5: polinomio x^4 + x^3 + x^2 + x
# Desarrollo de circuitos
# 6: Desarrollo de circuitos, utiliza las propiedades CircuitConstructorClassName=es.uned.simda.acidge.problema.dev.netlist.CirConstructorNetlist
ProblemClassName=es.uned.simda.acidge.problema.dev.ProblemaDev

#
# CircuitConstructorClassName=es.uned.simda.acidge.problema.dev.netlist.CirConstructorNetlist
# 1: Expresiones de desarrollo
# 2: Generación de Netlist directa
CircuitConstructorClassName=es.uned.simda.acidge.problema.dev.netlist.CirConstructorNetlist

#
# DevEvalClassName
DevEvalClassName = es.uned.simda.acidge.problema.dev.eval.kozamat.ParsimonyGaussianEval

# Number of individuals in the population
IndividualsNumber = 1000
#IndividualsNumber = 500
#IndividualsNumber = 100
#IndividualsNumber = 20

# Number of genes for each individual
MinGenesNumber = 150
MaxGenesNumber = 250

# Límite máximo del crecimiento de los genes
LimitMaxGenesNumber = 336
#LimitMaxGenesNumber = 294
#LimitMaxGenesNumber = 252
#LimitMaxGenesNumber = 250
#LimitMaxGenesNumber = 2500

# Máximo número de evaluaciones de fitness
MaxEvaluationCount = 200000

# Number of generations
#GenerationsNumber = 5000
GenerationsNumber = 3000
#GenerationsNumber = 1000
#GenerationsNumber = 500
#GenerationsNumber = 300
#GenerationsNumber = 250
#GenerationsNumber = 200
#GenerationsNumber = 150
#GenerationsNumber = 100
#GenerationsNumber = 25

# Termination condition for the evolutionary algorithm:
# 1: GenerationsNumber is interpreted as the number of generations for the algorithm
# 2: GenerationsNumber is interpreted as the maximum number of generations allowed without change in the fitness of the best individual
# 3: Cuando se alcanza MaxEvaluationCount evaluaciones de fitness (no soportada)
# 4: Cuando se alcanza una condición definida por el problema
# 5: Condición definida por problema y no detención hasta máximo número de generaciones
#TerminationConditionType = 1
TerminationConditionType = 5

# Type of population initialization
# 1: Random
# 2: Ramped half and half para expresiones
# 3: Ramped half and half para desarrollo de circuitos

PopulationInitializationClassName=es.uned.simda.acidge.ge.operadores.InicializacionRandom

# Profundidad inicial del árbol
# Sólo en el caso de Ramped half and half
InitialDepth = 3
#InitialDepth = 8
#InitialDepth = 10
#InitialDepth = 12

# Type of parent selection (method of constructing the mating pool):
# 1: Fitness-proportional selection
# 2: Stochastic universal sampling (No implementado)
# 3: Ranking selection (linear) (No implementado)
# 4: Tournament selection
# 5: Random selection
#ParentSelectionClassName=es.uned.simda.acidge.ge.operadores.Tournament
ParentSelectionClassName=es.uned.simda.acidge.ge.operadores.Tournament

# 


# Tournament size (just in case of tournament selection). Range: [2,IndividualsNumber].
#TournamentSize = 2
TournamentSize = 3
#TournamentSize = 4
#TournamentSize = 10
#TournamentSize = 15
#TournamentSize = 20
#TournamentSize = 25

# Type of crossover:
# 1: One-point crossover
# 2: Two-point crossover (no implementado)
# 3: N-point crossover (no implementado)
# 4: Parameterized uniform crossover (No implementado)
# 5: por bloques de tamaño CrossoverBlockSize, 1 punto de cruce
# 6: por bloques de tamaño CrossoverBlockSize, 1 punto, alineamiento mitad 
# 7: por bloques de tamaño CrossoverBlockSize, 1 punto, GE2Topology
# 8: 1 punto, GE2
# 9: 1.5 puntos, GE2
#10: 1 punto, GE3
#11: 1.5 puntos, GE3
#12: por bloques de tamaño CrossoverBlockSice, 1 punto, Multigramática, 2 XOPoints
CrossoverClassName=es.uned.simda.acidge.ge.operadores.CruceBloquesGE2

# Crossover rate
#CrossoverRate = 0.9
#CrossoverRate = 0.7
#CrossoverRate = 0.75
#CrossoverRate = 0.6
CrossoverRate = 0.5

# Number of crossover points (just in case of N-point crossover). Range: [1,GenesNumber-1]
CrossoverPointsNumber = 1

# Tamaño del bloque
CrossoverBlockSize = 4

# 


# Crossover rate GE2
CrossoverRateGE2 = 0.5

# Crossover rate GE3
CrossoverRateGE3 = 0.5

# Type of mutation:
# 1: Random Reset
# 2: Bitwise mutation
#MutationClassName=es.uned.simda.acidge.ge.operadores.MutacionBitwise
MutationClassName=es.uned.simda.acidge.ge.operadores.MutacionBitwise

# Mutation rate
MutationRate = 0.001
#MutationRate = 0.0025
#MutationRate = 0.005
#MutationRate = 0.007
#MutationRate = 0.0075
#MutationRate = 0.01
#MutationRate = 0.05
#MutationRate = 0.077
#MutationRate = 0.1

# Mutation rate GE2
MutationRateGE2 = 0.0

# Type of duplication:
# 1: copia del bloque al final 
# 2: copia del bloque duplicado en el penúltimo codón
DuplicationClassName=es.uned.simda.acidge.ge.operadores.Duplicacion

# Duplication rate
DuplicationRate = 0
#DuplicationRate = 0.005
#DuplicationRate = 0.01
#DuplicationRate = 0.02
#DuplicationRate = 0.05
#DuplicationRate = 0.1
#DuplicationRate = 0.2

# Aplicación de operadores
# 0: serie
# 1: paralelo
#OperatorChainType = 0

# Type of survivor selection:
# 1: Modelo Generacional
# 2: Steady state con reemplazo por edad
# 3: Steady state con reemplazo por adaptación
#SurvivorSelectionClassName=es.uned.simda.acidge.ge.operadores.Generacional
SurvivorSelectionClassName=es.uned.simda.acidge.ge.operadores.Generacional

# Elitism (just in case of generational model for survivor selection)
# Número de los mejores individuos que se conservan de la generación anterior
# Debe ser un número par
# 0: no elitismo
Elitism = 2

# Generational gap (just in case of steady state model for survivor selection). Range: [1, IndividualsNumber].
GenerationalGap = 50
#GenerationalGap = 2

# Máximo número de wrapping permitido en una cadena binaria
MaxWrappingNumber = 4

# Nombre del fichero de gramática para el generador
GrammarFileName = MultiNetlistMOSTopology1_n6.ebnf,MultiNetlistComunTop2.ebnf

# Tipo de funciones de adaptación según siguiente lista
# 1: función identidad
# 2: exp(x) - 1
# 3: ln(x + 1)
# 4: exp(x - 3) - exp(-3)
FunAdaptacionClassName=es.uned.simda.acidge.problema.funciones.Fun1


# Porcentaje de error en evaluación de circuito
UmbralError = 0.05

#Valor objetivo de fitness
GoalFitness = 0.01

#Flag que indica si existe o no valor de terminación del algoritmo
HasGoal = false

# 
# 1: OFF
# 2: lineal limitada
# 3: exponencial


# 

#

# Generador de números aleatorios
# 0: Mock para pruebas
# 1: java.util.Random
# 2: Simple Random Number Generator (Marsaglia)
# 3: Mersenne Twister
RandomGeneratorClassName=es.uned.simda.acidge.ge.random.RandomMersenne

# Nivel máximo de recursion del generador de expresiones
# Probado que con 2000 no hay stack overflow con pila por defecto
# Al introducir jvisualvm, baja a 1800
# No probado todavía con el nuevo generador desacoplado de la gramática
MaxRecursionLevel = 1800

# HashCache: almacena las netlist hasheadas
#
HashCache = true

# Histórico de clases realizadas. Ya no se hace así
# 7: ProblemaAmp: amplificador con ganancia, impedancia de entrada y frecuencia de corte prefijadas
# 8: ProblemaAmp2: incluye ganancia e impedancias en tres frecuencias, frecuencias de corte alta y baja
# 9: ProblemaAmp3: incluye ganancia e impedancias en tres frecuencias, frecuencias de corte alta y baja
#    y funciones de transformación, ganancia a más temperatura
# 10: ProblemaAmp4: incluye ganancia e impedancias en tres frecuencias, frecuencia de corte baja
#    y funciones de transformación, incluye corriente de colector a más temperatura
# 11: ProblemaAmp5: incluye ganancia e impedancias en tres frecuencias, frecuencia de corte baja
#    y funciones de transformación, incluye corriente de colector a más temperatura
# 12: ProblemaAmp6: incluye ganancia en tres frecuencias, impedancias a una, frecuencia de corte baja
#    y funciones de transformación, incluye corriente de colector a más temperatura
# 13: ProblemaAmp7: incluye ganancia en dos frecuencias, impedancias a una, frecuencia de corte baja
#    y funciones de transformación, incluye corriente de colector a más temperatura






